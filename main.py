# 1) –ü–æ–ø—Ä–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã ctrl+o
# 2) –£–±—Ä–∞—Ç—å —Ö–∞—Ä–¥–∫–æ–¥—ã –ø—É—Ç–µ–π –¥–æ —Ñ–∞–π–ª–æ–≤
# 3) –ü–æ–ø—Ä–∞–≤–∏—Ç –ë–î. –ü–æ—Å–æ–º—Ç—Ä–∏ CREATE OR IGNORE –∏–ª–∏ —Ç–∏–ø–∞ —Ç–æ–≥–æ. –í–æ–æ–±—â–µ –≤—ã–Ω–µ—Å—Ç–∏ —Ñ–Ω—É–∫—Ü–∏—é –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏. –°–æ–∑–¥–∞–≤–∞—Ç—å –±–¥ –≤ –Ω–∞—á–∞–ª–µ —Å–∫—Ä–∏–ø—Ç–∞, –∞ –Ω–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ.
# 4) –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –ø–æ—á–µ–º—É –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∫–∏–¥–∞–µ—Ç –æ—à–∏–±–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
# 5) –ö–∞–∫ –∑–∞–∫–æ–Ω—á–∏—à—å - —Å–ø—Ä–æ—Å–∏—Ç—å –ö–æ—Å—Ç—é –ø—Ä–æ tmux
# 6) –ü–æ—Ü–µ–ª–¥–æ–≤–∞—Ç—å –ö–æ—Å—Ç—é. –ú–∏–Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.

import os
import re
import sqlite3
import ffmpeg
import numpy as np
import pymorphy3
import requests
import speech_recognition as sr
import telebot
import torch
import yaml
from googletrans import Translator
from telebot import types

import httplib2
import googleapiclient.discovery
from oauth2client.service_account import ServiceAccountCredentials

morph = pymorphy3.MorphAnalyzer()

CREDENRIALS_FILE = 'gs_credentials.json'
spreadsheet_id = '10K4UCiuZgLzt-Pwvpgaeq4CriKWoI0Aelqg4p0diaj4'
spreadsheet_id1 = '1Kvckd52v-BOSfhrRKArnE6lZCfZshZoqufwFfDVOEhg'
credentials = ServiceAccountCredentials.from_json_keyfile_name(
    CREDENRIALS_FILE,
        ['https://www.googleapis.com/auth/spreadsheets',
         'https://www.googleapis.com/auth/drive'])
httpAuth = credentials.authorize(httplib2.Http())
service = googleapiclient.discovery.build('sheets', 'v4', http = httpAuth)

with open('latest_silero_models.yml', 'r', encoding="utf8") as yaml_file:
    models = yaml.load(yaml_file, Loader=yaml.SafeLoader)
model_conf = models.get('te_models').get('latest')

# see avaiable languages
available_languages = list(model_conf.get('languages'))
print(f'Available languages {available_languages}')

# and punctuation marks
available_punct = list(model_conf.get('punct'))
print(f'Available punctuation marks {available_punct}')

bot_token = '6040925657:AAErLyj7OVgOlqgmxF8npbt5-1aHP9zj6gc'
bot = telebot.TeleBot(bot_token)

def add_to_google_s(id, name, user_name, grade='-'):
    values = service.spreadsheets().values().append(
        spreadsheetId=spreadsheet_id,
        range="A1:D200",
        valueInputOption="RAW",
        body={
            'values': [
                [id, name, user_name, grade]]
        }).execute()
def google_5(grade='5'):
    values = service.spreadsheets().values().append(
        spreadsheetId=spreadsheet_id1,
        range="A1:A100",
        valueInputOption="RAW",
        body={
            'values': [
                [grade]]
        }).execute()
def google_4(grade='4'):
    values = service.spreadsheets().values().append(
        spreadsheetId=spreadsheet_id1,
        range="A1:A100",
        valueInputOption="RAW",
        body={
            'values': [
                [grade]]
        }).execute()
def google_3(grade='3'):
    values = service.spreadsheets().values().append(
        spreadsheetId=spreadsheet_id1,
        range="A1:A100",
        valueInputOption="RAW",
        body={
            'values': [
                [grade]]
        }).execute()
def google_2(grade='2'):
    values = service.spreadsheets().values().append(
        spreadsheetId=spreadsheet_id1,
        range="A1:A100",
        valueInputOption="RAW",
        body={
            'values': [
                [grade]]
        }).execute()
# def create_table(): #—Å–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
#     connection = sqlite3.connect('bot_data.db')
#     sqlite_create_table_query = ''' CREATE TABLE IF NOT EXISTS user (
#                                     id INTEGER PRIMARY KEY,
#                                     name TEXT NOT NULL,
#                                     user_name text NOT NULL UNIQUE);'''
#     cursor = connection.cursor()
#     print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ SQLite")
#     cursor.execute(sqlite_create_table_query)
#     connection.close()
# create_table()
# def insert_varible_into_table(id, name, user_name):
#     connection = sqlite3.connect('bot_data.db')
#     cursor = connection.cursor()
#     sqlite_insert_with_param = """INSERT INTO user
#                                   (id, name, user_name)
#                                   VALUES (?, ?, ?);"""
#
#     data_tuple = (id, name, user_name)
#     cursor.execute(sqlite_insert_with_param, data_tuple)
#     connection.commit()
#     print("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Python —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É user")
#     connection.close()
@bot.callback_query_handler(lambda callback_query: callback_query.data == "asd")
def voice2text(callback_query):
    chat_id = callback_query.message.chat.id
    bot.send_message(chat_id, "–ß—Ç–æ–±—ã —è –ø–µ—Ä–µ–≤–µ–ª –ì–° –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç—ã –º–æ–∂–µ—à—åüëá \n\n–∞) *–ó–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –ì–° —Å–∞–º*. \n–±) *–ü–µ—Ä–µ—Å–ª–∞—Ç—å —á—å–µ-—Ç–æ –ì–° –º–Ω–µ* -- —Ç–æ–ª—å–∫–æ –Ω–µ –ø–∏—à–∏ –∫ –Ω–µ–º—É —Ç–µ–∫—Å—Ç, –∏–Ω–∞—á–µ —è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—é. \n\n–Ø –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø—É—Å—Ç—Å—è 5-15 —Å–µ–∫—É–Ω–¥, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–±—ä–µ–º–∞. –ï—Å–ª–∏ –ì–° –±—É–¥–µ—Ç –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–µ - —è –≤—ã—à–ª—é —Ç–µ–±–µ *–∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ* –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Çü•∞", parse_mode="Markdown")
@bot.callback_query_handler(lambda callback_query: callback_query.data == "asdf")
def survey(callback_query):
    chat_id = callback_query.message.chat.id
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞–ª–∏  –∫–Ω–æ–ø–∫—É
    markup.add(types.InlineKeyboardButton('–°—É–ø–µ—Ä!', callback_data='super'))
    markup.add(types.InlineKeyboardButton('–•–æ—Ä–æ—à–æ!', callback_data='good'))
    markup.add(types.InlineKeyboardButton('–ù–æ—Ä–º–∞–ª—å–Ω–æ!', callback_data='normal'))
    markup.add(types.InlineKeyboardButton('–ë—ã–≤–∞–ª–æ –∏ –ª—É—á—à–µ!', callback_data='nu_takoe'))

    bot.send_message(chat_id, "–û—Ü–µ–Ω–∏, –Ω—Å–∫–æ–ª—å–∫–æ —è —Ç–µ–±—è –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:", reply_markup=markup, parse_mode="Markdown")
@bot.callback_query_handler(lambda callback_query: callback_query.data == "super")
def grade_1(callback_query):
    chat_id = callback_query.message.chat.id
    bot.send_message(chat_id,'–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –£–≤–µ—Ä–µ–Ω, —Ç—ã –ø–æ–º–æ–∂–µ—à—å –º–Ω–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ)')
    google_5()
@bot.callback_query_handler(lambda callback_query: callback_query.data == "good")
def grade_2(callback_query):
    chat_id = callback_query.message.chat.id
    bot.send_message(chat_id,'–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –£–≤–µ—Ä–µ–Ω, —Ç—ã –ø–æ–º–æ–∂–µ—à—å –º–Ω–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ)')
    google_4()
@bot.callback_query_handler(lambda callback_query: callback_query.data == "normal")
def grade_3(callback_query):
    chat_id = callback_query.message.chat.id
    bot.send_message(chat_id,'–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –£–≤–µ—Ä–µ–Ω, —Ç—ã –ø–æ–º–æ–∂–µ—à—å –º–Ω–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ)')
    google_3()
@bot.callback_query_handler(lambda callback_query: callback_query.data == "nu_takoe")
def grade_4(callback_query):
    chat_id = callback_query.message.chat.id
    bot.send_message(chat_id,'–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –£–≤–µ—Ä–µ–Ω, —Ç—ã –ø–æ–º–æ–∂–µ—à—å –º–Ω–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ)')
    google_2()

@bot.callback_query_handler(lambda callback_query: callback_query.data == "as")
def text_translator(callback_query):
    chat_id = callback_query.message.chat.id
    bot.send_message(chat_id, "–Ø —É–º–µ—é –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç *—Å –ª—é–±–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –†—É—Å—Å–∫–∏–π* –∏ *—Å –ê–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ –†—É—Å—Å–∫–∏–π*. \n\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ *—Ç–µ–∫—Å—Ç–æ–≤–æ–µ* —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏, —è —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—é —è–∑—ã–∫ü•∞", parse_mode="Markdown")
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.InlineKeyboardMarkup() #—Å–æ–∑–¥–∞–ª–∏  –∫–Ω–æ–ø–∫—É
    markup.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–≤–æ–¥ –ì–° –≤ —Ç–µ–∫—Å—Ç', callback_data='asd'))
    markup.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫', callback_data='as'))
    bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!üëã \n–ú–µ–Ω—è –∑–æ–≤—É—Ç Galina-bot, —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å —Å: \n\n1Ô∏è‚É£ *–ü–µ—Ä–µ–≤–æ–¥–æ–º* \n–£–º–µ—é –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å –ª—é–±–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –†—É—Å—Å–∫–∏–π –∏–ª–∏ —Å –†—É—Å—Å–∫–æ–≥–æ –Ω–∞ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π.\n\n2Ô∏è‚É£ *–ü–µ—Ä–µ–≤–æ–¥–æ–º —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç*\n–ê–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π üî•Telegram Premiumüî•\n\n3Ô∏è‚É£ *–ö—Ä–∞—Ç–∫–∏–º –ø–µ—Ä–µ—Å–∫–∞–∑–æ–º –ì–°*\n–î–µ–ª–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ —Ç–≤–æ—ë –ì–° –±–æ–ª–µ–µ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æüëá", reply_markup=markup, parse_mode="Markdown",)
    add_to_google_s(message.from_user.id, message.from_user.first_name, message.from_user.username)
    # insert_varible_into_table(message.from_user.id, message.from_user.first_name, message.from_user.username)

def audio_to_text(dest_name: str):
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∞—É–¥–∏–æ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ ".vaw" –≤ —Ç–µ–∫—Å—Ç
    r = sr.Recognizer()
    # —Ç—É—Ç –º—ã —á–∏—Ç–∞–µ–º –Ω–∞—à .vaw —Ñ–∞–π–ª
    message = sr.AudioFile(dest_name)
    with message as source:
        audio = r.record(source)
    result = r.recognize_google(audio, language="ru_RU") # –∏—Å–ø–æ–ª—å–∑—É—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç, —Ç–∞–∫ –∂–µ —Ç—É—Ç –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —è–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    return result

def punctuation(input_text):
    model, example_texts, languages, punct, apply_te = torch.hub.load(repo_or_dir=r"snakers4_silero-models_master", source="github", model='silero_te')
    return apply_te(input_text, lan='ru')

@bot.message_handler(content_types = ['text'])
def translate_message(message):
    translator = Translator()
    result = translator.translate(text=message.text)
    if result.src == 'en':
        markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞–ª–∏  –∫–Ω–æ–ø–∫—É
        markup.add(types.InlineKeyboardButton('–û—Ü–µ–Ω–∏—Ç—å –±–æ—Ç–∞', callback_data='asdf'))
        trans = translator.translate(message.text, dest='ru')
        bot.send_message(message.from_user.id, f'–ü–µ—Ä–µ–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è —Å {trans.src} –Ω–∞ {trans.dest}: \n*{trans.text}* \n\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –º–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏üôèüèª\n*–≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!*',
                         reply_markup=markup, parse_mode="Markdown")
    else:
        markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞–ª–∏  –∫–Ω–æ–ø–∫—É
        markup.add(types.InlineKeyboardButton('–û—Ü–µ–Ω–∏—Ç—å –±–æ—Ç–∞', callback_data='asdf'))
        trans = translator.translate(message.text, dest='en')
        bot.send_message(message.from_user.id, f'–ü–µ—Ä–µ–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è —Å {trans.src} –Ω–∞ {trans.dest}: \n*{trans.text}* \n\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –º–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏üôèüèª\n*–≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!*', reply_markup=markup, parse_mode="Markdown")


@bot.message_handler(content_types = ['voice'])
def get_voice_message(message):
    file_info = bot.get_file(message.voice.file_id)
    path = os.path.splitext(file_info.file_path)[0]  #–ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞
    fname = os.path.basename(path)
    file = requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(bot_token, file_info.file_path))
    with open(fname + '.oga', 'wb') as f:
    # with open('voice.ogg', 'wb') as f:
    #     f.write(file.content)
    # subprocess.run(['ffmpeg', '-i', fname + '.oga', fname + '.wav'])
    # subprocess.run(['ffmpeg', '-i', fname + '.oga', fname + '.wav'])  # –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç—Ä–∞—à–Ω–æ–µ –ü–û ffmpeg, –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ .oga –≤ .vaw
        f.write(file.content)
    # –ü–∏–∑–¥–∞ –∫–∞–∫–æ–π –∫–æ—Å—Ç—ã–ª—å - –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—É—Ç–∏ –¥–æ –∏—Å–ø–æ–ª—è–Ω–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ ffmpeg
    # a = subprocess.run([r"C:\FFmpeg\bin\ffmpeg.exe", '-i', fname + '.oga', fname + '.wav'])  # –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç—Ä–∞—à–Ω–æ–µ –ü–û ffmpeg, –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ .oga –≤ .vaw

    # sf.read(fname + '.ogg')
    # sf.write(fname + '.wav')

    ffmpeg.input(fname + '.oga').output(fname + '.wav').run()
    result = audio_to_text(fname + '.wav')  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç
    result = result.lower()
    answer = punctuation(result)
    bot.send_message(message.from_user.id, format(answer))
    os.remove(fname + '.wav') #—É–¥–∞–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–∞–ø–∫–µ

    text = answer

    sentences = re.split(r'[\.\!\?]', text)
    sentences = list(map(lambda x: x + ".", sentences))
    clean_text = text.lower()
    clean_text = re.sub(r"[^–ê-–Ø^–∞-—è^0-9^ ]", '', clean_text)
    word_tokenize = clean_text.split()

    # —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ —Ä—É—Å —è–∑
    stop_words = ["–∞", "–µ", "–∏", "–∂", "–º", "–æ", "–Ω–∞", "–Ω–µ", "–Ω–∏", "–æ–±", "–Ω–æ", "–æ–Ω", "–º–Ω–µ", "–º–æ–∏", "–º–æ–∂", "–æ–Ω–∞", "–æ–Ω–∏",
                  "–æ–Ω–æ", "–º–Ω–æ–π", "–º–Ω–æ–≥–æ", "–º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ", "–º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω–∞—è", "–º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ", "–º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π",
                  "–º–Ω–æ—é", "–º–æ–π", "–º–æ–≥", "–º–æ–≥—É—Ç", "–º–æ–∂–Ω–æ", "–º–æ–∂–µ—Ç", "–º–æ–∂—Ö–æ", "–º–æ—Ä", "–º–æ—è", "–º–æ—ë", "–º–æ—á—å", "–Ω–∞–¥", "–Ω–µ–µ",
                  "–æ–±–∞", "–Ω–∞–º", "–Ω–µ–º", "–Ω–∞–º–∏", "–Ω–∏–º–∏", "–º–∏–º–æ", "–Ω–µ–º–Ω–æ–≥–æ", "–æ–¥–Ω–æ–π", "–æ–¥–Ω–æ–≥–æ", "–º–µ–Ω–µ–µ", "–æ–¥–Ω–∞–∂–¥—ã",
                  "–æ–¥–Ω–∞–∫–æ", "–º–µ–Ω—è", "–Ω–µ–º—É", "–º–µ–Ω—å—à–µ", "–Ω–µ–π", "–Ω–∞–≤–µ—Ä—Ö—É", "–Ω–µ–≥–æ", "–Ω–∏–∂–µ", "–º–∞–ª–æ", "–Ω–∞–¥–æ", "–æ–¥–∏–Ω",
                  "–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å", "–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—ã–π", "–Ω–∞–∑–∞–¥", "–Ω–∞–∏–±–æ–ª–µ–µ", "–Ω–µ–¥–∞–≤–Ω–æ", "–º–∏–ª–ª–∏–æ–Ω–æ–≤", "–Ω–µ–¥–∞–ª–µ–∫–æ", "–º–µ–∂–¥—É",
                  "–Ω–∏–∑–∫–æ", "–º–µ–ª—è", "–Ω–µ–ª—å–∑—è", "–Ω–∏–±—É–¥—å", "–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ", "–Ω–∞–∫–æ–Ω–µ—Ü", "–Ω–∏–∫–æ–≥–¥–∞", "–Ω–∏–∫—É–¥–∞", "–Ω–∞—Å", "–Ω–∞—à",
                  "–Ω–µ—Ç", "–Ω–µ—é", "–Ω–µ—ë", "–Ω–∏—Ö", "–º–∏—Ä–∞", "–Ω–∞—à–∞", "–Ω–∞—à–µ", "–Ω–∞—à–∏", "–Ω–∏—á–µ–≥–æ", "–Ω–∞—á–∞–ª–∞", "–Ω–µ—Ä–µ–¥–∫–æ",
                  "–Ω–µ—Å–∫–æ–ª—å–∫–æ", "–æ–±—ã—á–Ω–æ", "–æ–ø—è—Ç—å", "–æ–∫–æ–ª–æ", "–º—ã", "–Ω—É", "–Ω—Ö", "–æ—Ç", "–æ—Ç–æ–≤—Å—é–¥—É", "–æ—Å–æ–±–µ–Ω–Ω–æ", "–Ω—É–∂–Ω–æ",
                  "–æ—á–µ–Ω—å", "–æ—Ç—Å—é–¥–∞", "–≤", "–≤–æ", "–≤–æ–Ω", "–≤–Ω–∏–∑", "–≤–Ω–∏–∑—É", "–≤–æ–∫—Ä—É–≥", "–≤–æ—Ç", "–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å",
                  "–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—ã–π", "–≤–æ—Å–µ–º—å", "–≤–æ—Å—å–º–æ–π", "–≤–≤–µ—Ä—Ö", "–≤–∞–º", "–≤–∞–º–∏", "–≤–∞–∂–Ω–æ–µ", "–≤–∞–∂–Ω–∞—è", "–≤–∞–∂–Ω—ã–µ", "–≤–∞–∂–Ω—ã–π",
                  "–≤–¥–∞–ª–∏", "–≤–µ–∑–¥–µ", "–≤–µ–¥—å", "–≤–∞—Å", "–≤–∞—à", "–≤–∞—à–∞", "–≤–∞—à–µ", "–≤–∞—à–∏", "–≤–ø—Ä–æ—á–µ–º", "–≤–µ—Å—å", "–≤–¥—Ä—É–≥", "–≤—ã",
                  "–≤—Å–µ", "–≤—Ç–æ—Ä–æ–π", "–≤—Å–µ–º", "–≤—Å–µ–º–∏", "–≤—Ä–µ–º–µ–Ω–∏", "–≤—Ä–µ–º—è", "–≤—Å–µ–º—É", "–≤—Å–µ–≥–æ", "–≤—Å–µ–≥–¥–∞", "–≤—Å–µ—Ö", "–≤—Å–µ—é",
                  "–≤—Å—é", "–≤—Å—è", "–≤—Å—ë", "–≤—Å—é–¥—É", "–≥", "–≥–æ–¥", "–≥–æ–≤–æ—Ä–∏–ª", "–≥–æ–≤–æ—Ä–∏—Ç", "–≥–æ–¥–∞", "–≥–æ–¥—É", "–≥–¥–µ", "–¥–∞", "–µ–µ",
                  "–∑–∞", "–∏–∑", "–ª–∏", "–∂–µ", "–∏–º", "–¥–æ", "–ø–æ", "–∏–º–∏", "–ø–æ–¥", "–∏–Ω–æ–≥–¥–∞", "–¥–æ–≤–æ–ª—å–Ω–æ", "–∏–º–µ–Ω–Ω–æ", "–¥–æ–ª–≥–æ",
                  "–ø–æ–∑–∂–µ", "–±–æ–ª–µ–µ", "–¥–æ–ª–∂–Ω–æ", "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "–∑–Ω–∞—á–∏—Ç", "–∏–º–µ—Ç—å", "–±–æ–ª—å—à–µ", "–ø–æ–∫–∞", "–µ–º—É", "–∏–º—è", "–ø–æ—Ä",
                  "–ø–æ—Ä–∞", "–ø–æ—Ç–æ–º", "–ø–æ—Ç–æ–º—É", "–ø–æ—Å–ª–µ", "–ø–æ—á–µ–º—É", "–ø–æ—á—Ç–∏", "–ø–æ—Å—Ä–µ–¥–∏", "–µ–π", "–¥–≤–∞", "–¥–≤–µ", "–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å",
                  "–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—ã–π", "–¥–≤–∞–¥—Ü–∞—Ç—å", "–¥–≤–∞–¥—Ü–∞—Ç—ã–π", "–¥–≤—É—Ö", "–µ–≥–æ", "–¥–µ–ª", "–∏–ª–∏", "–±–µ–∑", "–¥–µ–Ω—å", "–∑–∞–Ω—è—Ç", "–∑–∞–Ω—è—Ç–∞",
                  "–∑–∞–Ω—è—Ç–æ", "–∑–∞–Ω—è—Ç—ã", "–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ", "–¥–∞–≤–Ω–æ", "–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å", "–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—ã–π", "–¥–µ–≤—è—Ç—å", "–¥–µ–≤—è—Ç—ã–π",
                  "–¥–∞–∂–µ", "–∞–ª–ª–æ", "–∂–∏–∑–Ω—å", "–¥–∞–ª–µ–∫–æ", "–±–ª–∏–∑–∫–æ", "–∑–¥–µ—Å—å", "–¥–∞–ª—å—à–µ", "–¥–ª—è", "–ª–µ—Ç", "–∑–∞—Ç–æ", "–¥–∞—Ä–æ–º",
                  "–ø–µ—Ä–≤—ã–π", "–ø–µ—Ä–µ–¥", "–∑–∞—Ç–µ–º", "–∑–∞—á–µ–º", "–ª–∏—à—å", "–¥–µ—Å—è—Ç—å", "–¥–µ—Å—è—Ç—ã–π", "–µ—é", "–µ—ë", "–∏—Ö", "–±—ã", "–µ—â–µ",
                  "–ø—Ä–∏", "–±—ã–ª", "–ø—Ä–æ", "–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤", "–ø—Ä–æ—Ç–∏–≤", "–ø—Ä–æ—Å—Ç–æ", "–±—ã–≤–∞–µ—Ç", "–±—ã–≤—å", "–µ—Å–ª–∏", "–ª—é–¥–∏", "–±—ã–ª–∞",
                  "–±—ã–ª–∏", "–±—ã–ª–æ", "–±—É–¥–µ–º", "–±—É–¥–µ—Ç", "–±—É–¥–µ—Ç–µ", "–±—É–¥–µ—à—å", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ", "–±—É–¥—É", "–±—É–¥—å", "–±—É–¥—Ç–æ", "–±—É–¥—É—Ç",
                  "–µ—â—ë", "–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å", "–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—ã–π", "–¥—Ä—É–≥–æ", "–¥—Ä—É–≥–æ–µ", "–¥—Ä—É–≥–æ–π", "–¥—Ä—É–≥–∏–µ", "–¥—Ä—É–≥–∞—è", "–¥—Ä—É–≥–∏—Ö", "–µ—Å—Ç—å",
                  "–ø—è—Ç—å", "–±—ã—Ç—å", "–ª—É—á—à–µ", "–ø—è—Ç—ã–π", "–∫", "–∫–æ–º", "–∫–æ–Ω–µ—á–Ω–æ", "–∫–æ–º—É", "–∫–æ–≥–æ", "–∫–æ–≥–¥–∞", "–∫–æ—Ç–æ—Ä–æ–π",
                  "–∫–æ—Ç–æ—Ä–æ–≥–æ", "–∫–æ—Ç–æ—Ä–∞—è", "–∫–æ—Ç–æ—Ä—ã–µ", "–∫–æ—Ç–æ—Ä—ã–π", "–∫–æ—Ç–æ—Ä—ã—Ö", "–∫–µ–º", "–∫–∞–∂–¥–æ–µ", "–∫–∞–∂–¥–∞—è", "–∫–∞–∂–¥—ã–µ", "–∫–∞–∂–¥—ã–π",
                  "–∫–∞–∂–µ—Ç—Å—è", "–∫–∞–∫", "–∫–∞–∫–æ–π", "–∫–∞–∫–∞—è", "–∫—Ç–æ", "–∫—Ä–æ–º–µ", "–∫—É–¥–∞", "–∫—Ä—É–≥–æ–º", "—Å", "—Ç", "—É", "—è", "—Ç–∞", "—Ç–µ",
                  "—É–∂", "—Å–æ", "—Ç–æ", "—Ç–æ–º", "—Å–Ω–æ–≤–∞", "—Ç–æ–º—É", "—Å–æ–≤—Å–µ–º", "—Ç–æ–≥–æ", "—Ç–æ–≥–¥–∞", "—Ç–æ–∂–µ", "—Å–æ–±–æ–π", "—Ç–æ–±–æ–π",
                  "—Å–æ–±–æ—é", "—Ç–æ–±–æ—é", "—Å–Ω–∞—á–∞–ª–∞", "—Ç–æ–ª—å–∫–æ", "—É–º–µ—Ç—å", "—Ç–æ—Ç", "—Ç–æ—é", "—Ö–æ—Ä–æ—à–æ", "—Ö–æ—Ç–µ—Ç—å", "—Ö–æ—á–µ—à—å", "—Ö–æ—Ç—å",
                  "—Ö–æ—Ç—è", "—Å–≤–æ–µ", "—Å–≤–æ–∏", "—Ç–≤–æ–π", "—Å–≤–æ–µ–π", "—Å–≤–æ–µ–≥–æ", "—Å–≤–æ–∏—Ö", "—Å–≤–æ—é", "—Ç–≤–æ—è", "—Ç–≤–æ—ë", "—Ä–∞–∑", "—É–∂–µ",
                  "—Å–∞–º", "—Ç–∞–º", "—Ç–µ–º", "—á–µ–º", "—Å–∞–º–∞", "—Å–∞–º–∏", "—Ç–µ–º–∏", "—Å–∞–º–æ", "—Ä–∞–Ω–æ", "—Å–∞–º–æ–º", "—Å–∞–º–æ–º—É", "—Å–∞–º–æ–π",
                  "—Å–∞–º–æ–≥–æ", "—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å", "—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—ã–π", "—Å–∞–º–∏–º", "—Å–∞–º–∏–º–∏", "—Å–∞–º–∏—Ö", "—Å–∞–º—É", "—Å–µ–º—å", "—á–µ–º—É", "—Ä–∞–Ω—å—à–µ",
                  "—Å–µ–π—á–∞—Å", "—á–µ–≥–æ", "—Å–µ–≥–æ–¥–Ω—è", "—Å–µ–±–µ", "—Ç–µ–±–µ", "—Å–µ–∞–æ–π", "—á–µ–ª–æ–≤–µ–∫", "—Ä–∞–∑–≤–µ", "—Ç–µ–ø–µ—Ä—å", "—Å–µ–±—è", "—Ç–µ–±—è",
                  "—Å–µ–¥—å–º–æ–π", "—Å–ø–∞—Å–∏–±–æ", "—Å–ª–∏—à–∫–æ–º", "—Ç–∞–∫", "—Ç–∞–∫–æ–µ", "—Ç–∞–∫–æ–π", "—Ç–∞–∫–∏–µ", "—Ç–∞–∫–∂–µ", "—Ç–∞–∫–∞—è", "—Å–∏—Ö", "—Ç–µ—Ö",
                  "—á–∞—â–µ", "—á–µ—Ç–≤–µ—Ä—Ç—ã–π", "—á–µ—Ä–µ–∑", "—á–∞—Å—Ç–æ", "—à–µ—Å—Ç–æ–π", "—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å", "—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—ã–π", "—à–µ—Å—Ç—å", "—á–µ—Ç—ã—Ä–µ",
                  "—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å", "—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—ã–π", "—Å–∫–æ–ª—å–∫–æ", "—Å–∫–∞–∑–∞–ª", "—Å–∫–∞–∑–∞–ª–∞", "—Å–∫–∞–∑–∞—Ç—å", "—Ç—É", "—Ç—ã", "—Ç—Ä–∏", "—ç—Ç–∞",
                  "—ç—Ç–∏", "—á—Ç–æ", "—ç—Ç–æ", "—á—Ç–æ–±", "—ç—Ç–æ–º", "—ç—Ç–æ–º—É", "—ç—Ç–æ–π", "—ç—Ç–æ–≥–æ", "—á—Ç–æ–±—ã", "—ç—Ç–æ—Ç", "—Å—Ç–∞–ª", "—Ç—É–¥–∞",
                  "—ç—Ç–∏–º", "—ç—Ç–∏–º–∏", "—Ä—è–¥–æ–º", "—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å", "—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—ã–π", "—ç—Ç–∏—Ö", "—Ç—Ä–µ—Ç–∏–π", "—Ç—É—Ç", "—ç—Ç—É", "—Å—É—Ç—å", "—á—É—Ç—å",
                  "—Ç—ã—Å—è—á"]
    word2count = {}
    for word in word_tokenize:
        # word = str
        word = morph.parse(word)[0].normal_form
        if word not in stop_words:
            if word not in word2count.keys():
                word2count[word] = 1
            else:
                word2count[word] += 1
    print(word2count)

    # –≤–∑–≤–µ—à–µ–Ω–Ω–∞—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
    for key in word2count.keys():
        word2count[key] = word2count[key] / max(
            word2count.values())  # –Ω–∞—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–æ–≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ, –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –°–ê–ú–û–ì7–û —á–∞—Å—Ç–æ–≤—Å—Ç—Ä–µ—á–∞–µ–º–æ–≥–æ

    sent2score = {}
    c = 0  # —Ö—Ä–∞–Ω–∏—Ç –∫–æ–ª-–≤–æ –∏–Ω–¥–µ–∫—Å–æ–≤, –ø—Ä–æ—à–µ–¥—à–∏—Ö –ø–æ –¥–ª–∏–Ω–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    for i, sentence in enumerate(sentences):
        if len(sentence.split(' ')) < 28 and len(sentence.split(' ')) > 9:
            if sentence not in sent2score.keys():
                sent2score[sentence] = 0
            for word in sentence.split():
                if word in word2count.keys():
                    sent2score[sentence] += word2count[
                        word]  # —Å—É–º–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —Å–ª–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏, –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    if c < 3:
        markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞–ª–∏  –∫–Ω–æ–ø–∫—É
        markup.add(types.InlineKeyboardButton('–û—Ü–µ–Ω–∏—Ç—å –±–æ—Ç–∞', callback_data='asdf'))
        bot.send_message(message.from_user.id, '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –º–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏üôèüèª\n*–≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!*', reply_markup=markup, parse_mode="Markdown")
        return
    idx = np.flip(
        np.argsort(list(sent2score.values())))  # –∏–Ω–¥–µ–∫—Å—ã "—Ä–µ–π—Ç–∏–Ω–≥–æ–≤" –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ (–Ω–µ –∏–Ω–¥–µ–∫—Å–æ–≤!!!)
    best_three_sentences = np.array(list(sent2score.keys()))[idx][:3]
    summary_mes = ''.join(best_three_sentences)
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞–ª–∏  –∫–Ω–æ–ø–∫—É
    markup.add(types.InlineKeyboardButton('–û—Ü–µ–Ω–∏—Ç—å –±–æ—Ç–∞', callback_data='asdf'))
    bot.send_message(message.from_user.id, f'*–ö—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:*\n{summary_mes}\n\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –º–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏üôèüèª\n*–≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!*', reply_markup=markup, parse_mode="Markdown")


bot.polling(none_stop=True, interval=0)